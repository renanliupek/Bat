function coeffs=calc_coef_a(p0,d,zs,zb,r,Z0,ZL,k,a)

% CALC_COEF_A calculates the analytical coefficients A, B, C, D, E and F of
% 1D forced impedance tube response of length Len=zs+zb with an homogeneous
% layer of thickness d located at x=0 for both open and closed termination.
% For the open termination the [Kinsler,2010] page 274 is used. It consists
% on a length correction of the tube Leff= Len + 0.6r.
%--------------------------------------------------------------------------
% Var - description
%--------------------------------------------------------------------------
% p0  - pressure amplitude delivered by the source (speaker)
% d   - layer thickness
% zs  - distance from sample surface to source (speaker), x = -zl
% zb  - distance from sample surface to tube backing (termination), x = zb
% r   - radius of tube's cross section
% Z0  - characteristic impedance of air (or fluid in the tube)
% ZL  - characteristic impedance of the layer to be tested
% k   - wavevector in the air
% a   - wavevector in the layer

% Amplitudes copied from Mathematica script it_analytical_sol.nb.
% Comments on how to import raw data from Mathematica:
% - Changed I by 1i (careful sin when using Crt+F);
% - E^ by exp (careful E^1);
% - add '...' to break the line;
% - and change * and / by .* and ./, respectively

%% CLOSED(h) TUBE 
% CLOSED TUBE coefficients within the air domain
Ah=(exp(1i.*k.*zs).*p0.*((-exp(2.*1i.*d.*k)).* ...
     (-1 + exp(2.*1i.*a.*d)).*(Z0 - ZL).*(Z0 + ZL) + ...
    exp(2.*1i.*k.*zb).*((Z0 - ZL).^2 - ...
      exp(2.*1i.*a.*d).*(Z0 + ZL).^2)))./...
  (exp(2.*1i.*d.*(a + k)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*zb)).*(Z0 - ZL).*(Z0 + ZL) + ...
   exp(2.*1i.*k.*(d + zs)).*(Z0 - ZL).*(Z0 + ZL) - ...
   exp(2.*1i.*d.*k).*(Z0 + ZL).^2 - ...
   exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*k.*zb).*(-Z0.^2 + ZL.^2) + ...
   exp(2.*1i.*(a.*d + k.*(d + zs))).*(-Z0.^2 + ZL.^2));

Bh= (exp(1i.*k.*zs).*p0.*(exp(2.*1i.*d.*(a + k)).*...
     (Z0 - ZL).^2 + exp(2.*1i.*(a.*d + k.*zb)).*...
     (Z0 - ZL).*(Z0 + ZL) - exp(2.*1i.*d.*k).*...
     (Z0 + ZL).^2 + exp(2.*1i.*k.*zb).*...
     (-Z0.^2 + ZL.^2)))./...
  (exp(2.*1i.*d.*(a + k)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*zb)).*(Z0 - ZL).*(Z0 + ZL) + ...
   exp(2.*1i.*k.*(d + zs)).*(Z0 - ZL).*(Z0 + ZL) - ...
   exp(2.*1i.*d.*k).*(Z0 + ZL).^2 - ...
   exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*k.*zb).*(-Z0.^2 + ZL.^2) + ...
   exp(2.*1i.*(a.*d + k.*(d + zs))).*(-Z0.^2 + ZL.^2));

 Ch= (4.*exp(1i.*(a.*d + k.*(d + 2.*zb + zs))).*p0.*Z0.*ZL)./...
  ((-exp(2.*1i.*d.*(a + k))).*(Z0 - ZL).^2 - ...
   exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*k.*zb).*(Z0 - ZL).*(Z0 + ZL) + ...
   exp(2.*1i.*(a.*d + k.*(d + zs))).*(Z0 - ZL).*...
    (Z0 + ZL) + exp(2.*1i.*d.*k).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*zb)).*(-Z0.^2 + ZL.^2) + ...
   exp(2.*1i.*k.*(d + zs)).*(-Z0.^2 + ZL.^2));

Dh= (4.*exp(1i.*(a.*d + k.*(d + zs))).*p0.*Z0.*ZL)./...
  ((-exp(2.*1i.*d.*(a + k))).*(Z0 - ZL).^2 - ...
   exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*k.*zb).*(Z0 - ZL).*(Z0 + ZL) + ...
   exp(2.*1i.*(a.*d + k.*(d + zs))).*(Z0 - ZL).*...
    (Z0 + ZL) + exp(2.*1i.*d.*k).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*zb)).*(-Z0.^2 + ZL.^2) + ...
   exp(2.*1i.*k.*(d + zs)).*(-Z0.^2 + ZL.^2));

% CLOSED TUBE coefficients within the layer 
Eh = (2.*exp(1i.*(2.*a.*d + k.*zs)).*p0.*ZL.*...
   (exp(2.*1i.*d.*k).*(Z0 - ZL) + exp(2.*1i.*k.*zb).*...
     (Z0 + ZL)))./((-exp(2.*1i.*d.*(a + k))).*...
    (Z0 - ZL).^2 - exp(2.*1i.*k.*(zb + zs)).*...
    (Z0 - ZL).^2 + exp(2.*1i.*k.*zb).*(Z0 - ZL).*...
    (Z0 + ZL) + exp(2.*1i.*(a.*d + k.*(d + zs))).*...
    (Z0 - ZL).*(Z0 + ZL) + exp(2.*1i.*d.*k).*...
    (Z0 + ZL).^2 + exp(2.*1i.*(a.*d + k.*(zb + zs))).*...
    (Z0 + ZL).^2 + exp(2.*1i.*(a.*d + k.*zb)).*...
    (-Z0.^2 + ZL.^2) + exp(2.*1i.*k.*(d + zs)).*...
    (-Z0.^2 + ZL.^2));

Fh = (2.*exp(1i.*k.*zs).*p0.*ZL.*(exp(2.*1i.*k.*zb).*(Z0 - ZL) + ...
    exp(2.*1i.*d.*k).*(Z0 + ZL)))./...
  ((-exp(2.*1i.*d.*(a + k))).*(Z0 - ZL).^2 - ...
   exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*k.*zb).*(Z0 - ZL).*(Z0 + ZL) + ...
   exp(2.*1i.*(a.*d + k.*(d + zs))).*(Z0 - ZL).*...
    (Z0 + ZL) + exp(2.*1i.*d.*k).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*zb)).*(-Z0.^2 + ZL.^2) + ...
   exp(2.*1i.*k.*(d + zs)).*(-Z0.^2 + ZL.^2));

%% OPEN TUBE
 %length corretion page 274 Fundamentals of Acoustics [Kinsler,2010] 
 zb=zb+0.6*r;
 
 % OPEN TUBE coefficients within the air domain
 Ao= (exp(1i.*k.*zs).*p0.*(exp(2.*1i.*d.*k).*(-1 + exp(2.*1i.*a.*d)).*...
     (Z0 - ZL).*(Z0 + ZL) + exp(2.*1i.*k.*zb).*...
     ((Z0 - ZL).^2 - exp(2.*1i.*a.*d).*(Z0 + ZL).^2)))./...
  ((-exp(2.*1i.*d.*(a + k))).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
   exp(2.*1i.*(a.*d + k.*zb)).*(Z0 - ZL).*(Z0 + ZL) +... 
   exp(2.*1i.*(a.*d + k.*(d + zs))).*(Z0 - ZL).*...
    (Z0 + ZL) + exp(2.*1i.*d.*k).*(Z0 + ZL).^2 - ...
   exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
   exp(2.*1i.*k.*zb).*(-Z0.^2 + ZL.^2) + ...
   exp(2.*1i.*k.*(d + zs)).*(-Z0.^2 + ZL.^2));

Bo= (exp(1i.*k.*zs).*p0.*(exp(2.*1i.*d.*(a + k)).*...
     (Z0 - ZL).^2 + exp(2.*1i.*k.*zb).*(Z0 - ZL).*...
     (Z0 + ZL) - exp(2.*1i.*d.*k).*(Z0 + ZL).^2 + ...
     exp(2.*1i.*(a.*d + k.*zb)).*(-Z0.^2 + ZL.^2)))./...
     (exp(2.*1i.*d.*(a + k)).*(Z0 - ZL).^2 - ...
      exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
      exp(2.*1i.*k.*zb).*(Z0 - ZL).*(Z0 + ZL) + ...
      exp(2.*1i.*k.*(d + zs)).*(Z0 - ZL).*(Z0 + ZL) -... 
      exp(2.*1i.*d.*k).*(Z0 + ZL).^2 + ...
      exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 +... 
      exp(2.*1i.*(a.*d + k.*zb)).*(-Z0.^2 + ZL.^2) + ...
      exp(2.*1i.*(a.*d + k.*(d + zs))).*(-Z0.^2 + ZL.^2));

Co= (4.*exp(1i.*(a.*d + k.*(d + 2.*zb + zs))).*p0.*Z0.*ZL)./...
   (exp(2.*1i.*d.*(a + k)).*(Z0 - ZL).^2 - ...
      exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 +... 
      exp(2.*1i.*k.*zb).*(Z0 - ZL).*(Z0 + ZL) + ...
      exp(2.*1i.*k.*(d + zs)).*(Z0 - ZL).*(Z0 + ZL) -... 
      exp(2.*1i.*d.*k).*(Z0 + ZL).^2 + ...
      exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 +... 
      exp(2.*1i.*(a.*d + k.*zb)).*(-Z0.^2 + ZL.^2) + ...
      exp(2.*1i.*(a.*d + k.*(d + zs))).*(-Z0.^2 + ZL.^2));

Do= (4.*exp(1i.*(a.*d + k.*(d + zs))).*p0.*Z0.*ZL)./...
   ((-exp(2.*1i.*d.*(a + k))).*(Z0 - ZL).^2 + ...
      exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
      exp(2.*1i.*(a.*d + k.*zb)).*(Z0 - ZL).*(Z0 + ZL) + ...
      exp(2.*1i.*(a.*d + k.*(d + zs))).*(Z0 - ZL).*...
        (Z0 + ZL) + exp(2.*1i.*d.*k).*(Z0 + ZL).^2 - ...
      exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
      exp(2.*1i.*k.*zb).*(-Z0.^2 + ZL.^2) + ...
      exp(2.*1i.*k.*(d + zs)).*(-Z0.^2 + ZL.^2));  

% OPEN TUBE coefficients within the layer
Eo= (2.*exp(1i.*(2.*a.*d + k.*zs)).*p0.*ZL.*...
      (exp(2.*1i.*d.*k).*(-Z0 + ZL) + exp(2.*1i.*k.*zb).*...
           (Z0 + ZL)))./(exp(2.*1i.*d.*(a + k)).*...
        (Z0 - ZL).^2 - exp(2.*1i.*k.*(zb + zs)).*...
        (Z0 - ZL).^2 + exp(2.*1i.*k.*zb).*(Z0 - ZL).*...
        (Z0 + ZL) + exp(2.*1i.*k.*(d + zs)).*(Z0 - ZL).*...
        (Z0 + ZL) - exp(2.*1i.*d.*k).*(Z0 + ZL).^2 + ...
      exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
      exp(2.*1i.*(a.*d + k.*zb)).*(-Z0.^2 + ZL.^2) + ...
      exp(2.*1i.*(a.*d + k.*(d + zs))).*(-Z0.^2 + ZL.^2));


Fo= (2.*exp(1i.*k.*zs).*p0.*ZL.*(exp(2.*1i.*k.*zb).*(-Z0 + ZL) + ... 
         exp(2.*1i.*d.*k).*(Z0 + ZL)))./...
   ((-exp(2.*1i.*d.*(a + k))).*(Z0 - ZL).^2 + ... 
      exp(2.*1i.*k.*(zb + zs)).*(Z0 - ZL).^2 + ...
      exp(2.*1i.*(a.*d + k.*zb)).*(Z0 - ZL).*(Z0 + ZL) + ... 
      exp(2.*1i.*(a.*d + k.*(d + zs))).*(Z0 - ZL).* ...
        (Z0 + ZL) + exp(2.*1i.*d.*k).*(Z0 + ZL).^2 - ...
      exp(2.*1i.*(a.*d + k.*(zb + zs))).*(Z0 + ZL).^2 + ...
      exp(2.*1i.*k.*zb).*(-Z0.^2 + ZL.^2) + ...
      exp(2.*1i.*k.*(d + zs)).*(-Z0.^2 + ZL.^2));

% assign values to struct
coeffs.Ah = Ah;
coeffs.Bh = Bh;
coeffs.Ch = Ch;
coeffs.Dh = Dh;
coeffs.Eh = Eh;
coeffs.Fh = Fh;


coeffs.Ao = Ao;
coeffs.Bo = Bo;
coeffs.Co = Co;
coeffs.Do = Do;
coeffs.Eo = Eo;
coeffs.Fo = Fo;

end